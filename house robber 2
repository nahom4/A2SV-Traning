class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        the problem is simmillar with house robber 1 the only differce is the houses are in 
        a circle i guess it can be treated as a base case
        If this new case didn't exist it would be a decision problem I could robe each house
        given i have not robbed the previous house
        rob 
        """
        
        cache = {}
        def dp(index,nums):
            
            
            if index >= len(nums):
                return 0
            
            if index in cache:
                return cache[index]
            
            cache[index] = max(dp(index + 2,nums) + nums[index],dp(index + 1,nums))
            
            return cache[index]
        
        if len(nums) == 1:
            return nums[0]
        first = dp(0,nums[:-1])
        cache = {}
        second = dp(1,nums)
        
        return max(first,second)
        
