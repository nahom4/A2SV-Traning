from collections import defaultdict
class ThroneInheritance:
    deleted = set()
    def __init__(self, kingName: str):
        
        self.graph = defaultdict(list)
        self.kingName = kingName
        self.deleted = set()

    def birth(self, parentName: str, childName: str) -> None:
        self.graph[parentName].append(childName)
        

    def death(self, name: str) -> None:
        
        self.deleted.add(name)

    def getInheritanceOrder(self) -> List[str]:
        
        #dfs
        lis = []
        def dfs(node):
            if node not in self.deleted: 
                lis.append(node)
            
            for child in self.graph[node]:
                dfs(child)
                
        dfs(self.kingName)
     
        
        return lis
        


# Your ThroneInheritance object will be instantiated and called as such:
# obj = ThroneInheritance(kingName)
# obj.birth(parentName,childName)
# obj.death(name)
# param_3 = obj.getInheritanceOrder()
